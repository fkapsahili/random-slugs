[build-system]
build-backend = "hatchling.build"
requires = [
  "hatchling",
  "hatch-semver",
]

[project]
authors = [{name = "Fabio Kapsahili", email = "fabio.kapsahili@protonmail.com"}]
description = "A Python package for generating random slugs using a customizable vocabulary of words."
dynamic = [
  "version",
]
keywords = ["sample", "setuptools", "development"]
license = {file = "LICENSE.txt"}
maintainers = [
  {name = "Fabio Kapsahili", email = "fabio.kapsahili@protonmail.com"},
]
name = "random-slugs"
readme = "README.md"
requires-python = ">=3.9"

classifiers = [
  "Intended Audience :: Developers",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3 :: Only",
]

dependencies = []

[project.optional-dependencies]
dev = ["check-manifest"]
test = ["coverage"]

[project.urls]
"Bug Reports" = "https://github.com/fkapsahili/random-slugs/issues"
"Homepage" = "https://github.com/fkapsahili/random-slugs"
"Source" = "https://github.com/fkapsahili/random-slugs/"

[tool.hatch]
package-data = {"random-slugs" = ["*.txt"]}

[tool.hatch.version]
path = "random_slugs/__about__.py"
scheme = "semver"
validate-bump = true

[tool.hatch.envs.test]
dependencies = [
  "pytest",
]

[[tool.hatch.envs.test.matrix]]
python = ["3.8", "3.9", "3.10", "3.11", "3.12"]

[tool.hatch.envs.test.scripts]
test = "pytest"

[tool.hatch.envs.lint]
dependencies = [
  "ruff",
]

[tool.hatch.envs.lint.scripts]
check = "ruff check ."

[tool.ruff]
line-length = 100
target-version = "py312"

[tool.ruff.lint]
select = ["A", "B", "E", "F", "I", "ANN"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["ANN"]

[tool.pytest.ini_options]
log_cli = true
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_level = "DEBUG"

[tool.semantic_release]
allow_zero_version = false
commit_message = "chore(release): release v{version} [skip ci]"
remove_dist = true
tag_format = "v{version}"
version_variables = ["random_slugs/__about__.py:__version__"]

[tool.semantic_release.commit_parser_options]
allowed_tags = [
  "build",
  "chore",
  "ci",
  "docs",
  "feat",
  "fix",
  "perf",
  "style",
  "refactor",
  "test",
]
major_tags = ["feat!"]
minor_tags = ["feat"]
patch_tags = ["fix", "perf", "docs", "style", "refactor", "test", "chore", "ci", "build"]

[tool.semantic_release.branches.main]
match = '(master|main)'
prerelease = false
